{# vi: set ft=sls : #}

{% set k8s_salt = {} %}

### Check if it's worth even running the template
{% if salt['mine.get']('I@k8s_salt:enabled:True', 'get_k8s_cluster', 'compound').values() | unique | length > 0 %}
{% if salt['mine.get']('I@k8s_salt:enabled:True', 'get_minion_id', 'compound').values() | unique | length > 0 %}

# TODO: template apiVersions depending on k8s version?
{% set k8s_salt = {
  'kubelet':{
    'config':{
      'kind':'KubeletConfiguration',
      'apiVersion':'kubelet.config.k8s.io/v1beta1',
      'enableServer':True,
      'authentication':{
        'anonymous':{
          'enabled':False
        },
        'webhook':{
          'enabled':True
        },
        'x509':{
          'clientCAFile':'/etc/kubernetes/pki/kube-ca.pem'
        }
      },
      'authorization':{
        'mode':'Webhook'
      },
      'clusterDomain':k8s_salt['cluster_domain'],
      'clusterDNS':[k8s_salt['dns_service_ip']],
      'maxPods':110,
      'podCIDR':'',
      'resolvConf':'/etc/resolv.conf',
      'rotateCertificates':True,
      'runtimeRequestTimeout':'15m',
      'tlsCertFile':'/etc/kubernetes/pki/kubelet.pem',
      'tlsPrivateKeyFile':'/etc/kubernetes/pki/kubelet-key.pem',
      'logging':{
        'format':'json',
        'sanitization':False
      }
    },
    'flags':{
      'config':'/etc/kubernetes/config/kubelet-config.yaml',
      'kubeconfig':'/etc/kubernetes/config/kubelet.kubeconfig',
      'container-runtime':k8s_salt['container_runtime'],
      'container-runtime-endpoint':k8s_salt['container_runtime_endpoint'],
      'network-plugin':'cni',
      'register-node':'true',
      'hostname-override':k8s_salt['hostname_fqdn'],
      'v':2
    }
  },
  'kube-scheduler':{
    'config':{
      'apiVersion':'kubescheduler.config.k8s.io/v1beta1',
      'clientConnection':{
        'kubeconfig':'/etc/kubernetes/config/scheduler.kubeconfig'
      },
      'kind':'KubeSchedulerConfiguration',
      'leaderElection':{
        'leaderElect':True
      }
    },
    'flags':{
      'config':'/etc/kubernetes/config/kube-scheduler-config.yaml',
      'v':'2'
    }
  },
  'kube-controller-manager':{
    'flags':{
      'allocate-node-cidrs':'true',
      'bind-address':'0.0.0.0',
      'cloud-provider':'""',
      'cluster-cidr':k8s_salt['cluster_cidr'],
      'cluster-name':salt['pillar.get']('k8s_salt:cluster'),
      'cluster-signing-cert-file':'/etc/kubernetes/pki/kube-ca.pem',
      'configure-cloud-routes':'false',
      'kubeconfig':'/etc/kubernetes/config/controller.kubeconfig',
      'leader-elect':'true',
      'logging-format':'json',
      'port':'0',
      'root-ca-file':'/etc/kubernetes/pki/kube-ca.pem',
      'service-account-private-key-file':'/etc/kubernetes/pki/sa-key.pem',
      'service-cluster-ip-range':k8s_salt['service_cidr'],
      'use-service-account-credentials':'true',
      'v':'2'
    }
  },
  'kube-apiserver':{
    'flags':{
      'advertise-address':'{{ k8s_salt['ip'] }}',
      'allow-privileged':'true',
      'anonymous-auth':'false',
      'apiserver-count':'{{ api_servers | length }}',
      'audit-log-maxage':'30',
      'audit-log-maxbackup':'3',
      'audit-log-maxsize':'100',
      'audit-log-path':'/var/log/k8s/audit.log',
      'authorization-mode':'Node,RBAC',
      'bind-address':'0.0.0.0',
      'client-ca-file':'/etc/kubernetes/pki/kube-ca.pem',
      'cloud-provider':'""',
      'enable-admission-plugins':'NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,ResourceQuota,NodeRestriction,Priority,TaintNodesByCondition,PersistentVolumeClaimResize',
      'enable-aggregator-routing':'true',
      'etcd-cafile':'/etc/kubernetes/pki/etcd-trusted-ca.pem',
      'etcd-certfile':'/etc/kubernetes/pki/etcdclient.pem',
      'etcd-keyfile':'/etc/kubernetes/pki/etcdclient-key.pem',
      'etcd-prefix':'/registry',
      'etcd-servers':'{% for k, v in etcd_servers.items() %}https://{{v['hostname_fqdn']}}:2379{% if not loop.last %},{% endif %}{% endfor %}',
      'kubelet-certificate-authority':'/etc/kubernetes/pki/kube-ca.pem',
      'kubelet-client-certificate':'/etc/kubernetes/pki/apiserver.pem',
      'kubelet-client-key':'/etc/kubernetes/pki/apiserver-key.pem',
      'kubelet-preferred-address-types':'InternalIP,ExternalIP,Hostname',
      'profiling':'false',
      'proxy-client-cert-file':'/etc/kubernetes/pki/proxy-client.pem',
      'proxy-client-key-file':'/etc/kubernetes/pki/proxy-client-key.pem',
      'requestheader-allowed-names':'kube-apiserver-proxy-client',
      'requestheader-client-ca-file':'/etc/kubernetes/pki/requestheader-ca.pem',
      'requestheader-extra-headers-prefix':'X-Remote-Extra-',
      'requestheader-group-headers':'X-Remote-Group',
      'requestheader-username-headers':'X-Remote-User',
      'runtime-config':'api/all=true',
      'secure-port':k8s_salt['apiserver_port'],
      'service-account-issuer':'https://' + k8s_salt['apiserver_balancer_url'] + ':' + k8s_salt['apiserver_balancer_port'],
      'service-account-lookup':'true',
      'service-account-key-file':'/etc/kubernetes/pki/sa.pem',
      'service-account-signing-key-file':'/etc/kubernetes/pki/sa-key.pem',
      'service-cluster-ip-range':k8s_salt['service_cidr'],
      'service-node-port-range':'30000-32767',
      'storage-backend':'etcd3',
      'tls-cert-file':'/etc/kubernetes/pki/apiserver.pem',
      'tls-private-key-file':'/etc/kubernetes/pki/apiserver-key.pem',
      'tls-cipher-suites':'TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305'
    }
  },
  'etcd':{
    'flags':{
      'name':'{{ k8s_salt['hostname_fqdn'] }}',
      'cert-file':'/etc/kubernetes/pki/etcd-trusted.pem',
      'key-file':'/etc/kubernetes/pki/etcd-trusted-key.pem',
      'peer-cert-file':'/etc/kubernetes/pki/etcd-peer.pem',
      'peer-key-file':'/etc/kubernetes/pki/etcd-peer-key.pem',
      'trusted-ca-file':'/etc/kubernetes/pki/etcd-trusted-ca.pem',
      'peer-trusted-ca-file':'/etc/kubernetes/pki/etcd-peer-ca.pem',
      'peer-client-cert-auth':'true',
      'client-cert-auth':'true',
      'initial-advertise-peer-urls':'https://{{ k8s_salt['hostname_fqdn'] }}:2380',
      'listen-peer-urls':'https://0.0.0.0:2380',
      'listen-client-urls':'https://0.0.0.0:2379',
      'advertise-client-urls':'https://{{ k8s_salt['hostname_fqdn'] }}:2379',
      'initial-cluster-token':'{{ cluster }}',
      'initial-cluster':'{% for k, v in etcd_servers.items() %}{{ v['hostname_fqdn'] }}=https://{{ v['hostname_fqdn'] }}:2380{% if not loop.last %},{% endif %}{% endfor %}',
      'initial-cluster-state':'new',
      'logger':'zap',
      'data-dir':'/var/lib/etcd'
    }
  }
}


{% do k8s_salt.update({'arch':salt['pillar.get']('k8s_salt:arch') or salt['grains.get']('osarch') or 'amd64'}) %}
{% do k8s_salt.update({'cas':['kube-ca','etcd-peer-ca','etcd-trusted-ca','requestheader-ca']}) %}

# Hostname is also a problem
{% do k8s_salt.update({'hostname_fqdn':salt['pillar.get']('k8s_salt:hostname_fqdn') or salt['grains.get']('fqdn') or salt['grains.get']('id')}) %}

# Try to infer the node's IP 
# TODO: this ain't easy. There will be a bunch of edge cases to sort out.
{% if salt['pillar.get']('k8s_salt:ipv6') %}
  {% if salt['pillar.get']('k8s_salt:network_interface') %}
    {% do k8s_salt.update({'network_interface':salt['pillar.get']('k8s_salt:network_interface')}) %}
    {% do k8s_salt.update({'ip':salt['grains.get']('ip6_interfaces')[k8s_salt['network_interface']] | first}) %}
  {% else %} 
    {% do k8s_salt.update({'ip':salt['grains.get']('fqdn_ip6') | first}) %}
  {% endif %}
{% else %}
  {% if salt['pillar.get']('k8s_salt:network_interface') %}
    {% do k8s_salt.update({'network_interface':salt['pillar.get']('k8s_salt:network_interface')}) %}
{% do salt.log.error(salt['grains.get']('ip4_interfaces')) %}
    {% do k8s_salt.update({'ip':salt['grains.get']('ip4_interfaces')[k8s_salt['network_interface']] | first}) %}
  {% else %} 
    {% do k8s_salt.update({'ip':salt['grains.get']('fqdn_ip4') | first}) %}
  {% endif %}
{% endif %}

# Signing policy constraints
{% set allowed_minions = {
                           'etcd-peer-ca':'I@k8s_salt:roles:etcd:True',
                           'etcd-trusted-ca':'I@k8s_salt:roles:etcd:True or I@k8s_salt:roles:controlplane:True or I@k8s_salt:roles:admin:True',
                           'requestheader-ca':'I@k8s_salt:roles:controlplane:True',
                           'kube-ca':'I@k8s_salt:roles:controlplane:True or I@k8s_salt:roles:worker:True or I@k8s_salt:roles:admin:True'
                         } %}
{% do k8s_salt.update({'allowed_minions':allowed_minions}) %}

# CA server
{% do k8s_salt.update({'ca_server':salt['mine.get']('I@k8s_salt:roles:ca:True', 'get_minion_id', 'compound').popitem()[1]}) %}

# Version info
{% do k8s_salt.update({'version_kubernetes':salt['pillar.get']('k8s_salt:version:kubernetes') or '1.21.0'}) %}
{% do k8s_salt.update({'version_etcd':salt['pillar.get']('k8s_salt:version:etcd') or 'v3.4.15'}) %}

# Proxy repos (if necessary)
{% do k8s_salt.update({'k8s_proxy_repo':salt['pillar.get']('k8s_salt:k8s_proxy_repo') or 'https://storage.googleapis.com/kubernetes-release/release'}) %}
{% do k8s_salt.update({'etcd_proxy_repo':salt['pillar.get']('k8s_salt:etcd_proxy_repo') or 'https://github.com/etcd-io/etcd/releases/download'}) %}

# K8s binaries
{% set binaries = [] %}
{% if salt['pillar.get']('k8s_salt:roles:controlplane') %}
{% do binaries.append('kube-apiserver') %}
{% do binaries.append('kube-scheduler') %}
{% do binaries.append('kube-controller-manager') %}
{% endif %}
{% if salt['pillar.get']('k8s_salt:roles:worker') %}
{% do binaries.append('kube-proxy') %}
{% do binaries.append('kubelet') %}
{% endif %}
{% if salt['pillar.get']('k8s_salt:roles:admin') %}
{% do binaries.append('kubectl') %}
{% endif %}
{% do k8s_salt.update({'k8s_binaries':binaries}) %}

# K8s cluster properties
{% do k8s_salt.update({'service_cidr':salt['pillar.get']('k8s_salt:service_cidr') or '10.143.0.0/16'}) %}
{% do k8s_salt.update({'cluster_cidr':salt['pillar.get']('k8s_salt:cluster_cidr') or '10.142.0.0/16'}) %}
# TODO: derive service ip from service cidr
{% do k8s_salt.update({'api_service_ip':salt['pillar.get']('k8s_salt:api_service_ip') or '10.143.0.1'}) %}
# TODO: derive service ip from service cidr
{% do k8s_salt.update({'dns_service_ip':salt['pillar.get']('k8s_salt:dns_service_ip') or '10.143.0.2'}) %}
{% do k8s_salt.update({'api_extra_ips':salt['pillar.get']('k8s_salt:api_extra_ips') or []}) %}
{% do k8s_salt.update({'cluster_domain':salt['pillar.get']('k8s_salt:cluster_domain') or 'cluster.local'}) %}
{% do k8s_salt.update({'apiserver_balancer_url':salt['pillar.get']('k8s_salt:apiserver_balancer_url') or 'localhost'}) %}
{% do k8s_salt.update({'apiserver_port':salt['pillar.get']('k8s_salt:apiserver_port') or '6443'}) %}
{% do k8s_salt.update({'apiserver_balancer_port':salt['pillar.get']('k8s_salt:apiserver_balancer_port') or k8s_salt['apiserver_port']}) %}
{% do k8s_salt.update({'container_runtime':salt['pillar.get']('k8s_salt:container_runtime') or 'remote'}) %}
{% do k8s_salt.update({'container_runtime_endpoint':salt['pillar.get']('k8s_salt:container_runtime_endpoint') or 'unix:///var/run/containerd/containerd.sock'}) %}

### End check if it's worth rendering template
{% endif %}
{% endif %}
